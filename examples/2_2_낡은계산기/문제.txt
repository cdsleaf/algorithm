낡은 계산기 (An Old Calculator)

[시간제한] 50 개의 테스트 케이스를 합쳐 1초(C/C++), 2초(JAVA/ABAP)

아버지의 서랍에서 아주 오래 전에 사용했던 낡은 계산기 하나를 발견하였다. 
이 계산기의 기능은 매우 단순하여 두 개의 자연수를 더하는 기능밖에 없었으며, 
덧셈을 하는 데에 걸리는 시간도 두 수의 합의 크기에 비례하여 늘어났다.

예를 들어, 3 + 5 를 계산한 결과(8) 가 나오기 까지 8초의 시간이 걸리고, 
10 + 14 를 계산할 때에는 24초의 시간이 걸린다.

우리는 이 계산기를 이용하여 여러 수의 덧셈을 해 보기로 하였다. 
하지만 앞서 말했듯이, 이 계산기는 여러 수를 한꺼번에 더하는 기능은 없으므로 
두 수씩 더하는 작업을 반복하여 구할 수 밖에 없었다.

그런데 계산하는 데에 걸리는 시간은 여러 개의 수를 무엇부터 더하느냐에 따라 
달라진다는 것을 알게 되었다. 예를 들어서 5 + 4 + 3 를 계산할 때, 
먼저 5 + 4 를 계산하고 그 결과값 9 에 다시 3를 더한다면, 
총 계산 시간은 5 + 4 계산 시 9초, 9 + 3 계산시 12초로 총 21초가 걸리지만, 
4 + 3 를 먼저 계산하고 (7초), 그 결과에 다시 5를 더하는 방법으로 하면 (12초) 
총 19초가 걸려서 앞선 방법보다 2초를 단축시켜 답을 구할 수 있다.

하나의 예를 더 들어보자. 1 + 1 + 1 + 1 을 계산한다고 할 때 앞에서부터 
차례대로 더하는 방법으로 계산을 하면, 즉 (((1+1)+1)+1) 과 같이 계산을 
하면 9초가 걸리지만, 앞의 두 개, 뒤의 두 개를 묶어 먼저 계산을 하면, 
즉 ((1+1)+(1+1)) 과 같이 계산을 하면 8초가 걸려 1초를 줄일 수 있다.

이렇듯, 이 계산기는 매우 느리기 때문에, 우리는 가급적 빨리 답을 구하는 방법을 찾으려고 한다. 
여러 수의 덧셈을 계산한다고 할 때 이 계산기를 이용하여 주어진 N 개의 자연수들의 합을 
구하는 데 걸리는 시간의 최소값을 구하는 프로그램을 작성하여라.

[제한 조건]
자연수의 개수 N 은 2 이상 100 이하이다..
주어진 각각의 자연수의 크기는 10000 이하이다.

[입력]
첫 줄에 테스트 케이스의 개수 T가 주어지고 그 다음 줄부터 T 개의 테스트 케이스가 주어진다.
각 테스트 케이스는 2 줄로 구성된다. 첫 줄에는 자연수의 개수 N 이 주어지고 
그 다음 줄에는 N 개의 자연수가 공백으로 구분되어 주어진다.

[출력]
총 T 줄이 출력된다. 각 줄은 #x 로 시작하고 (x 는 테스트 케이스 번호, 1부터 시작) 
공백을 하나 둔 다음, 주어진 수의 합을 구하는 데에 걸리는 시간의 최소값을 출력한다.

[입출력 예]
(입력)
3          테스트 케이스 의 수 : T
3          1번째 테스트 케이스 시작
5 4 3
8
2 2 2 2 2 2 2 4
5
4 1 3 3 1

(출력)
#1 19
#2 54
#3 26

